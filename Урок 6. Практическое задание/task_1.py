"""
1.	Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи.
Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.
ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

#  Python 3.7.6, Windows 10 x64

import time
from random import randint
from memory_profiler import memory_usage
from memory_profiler import profile

def memory_checker(func):
    def start():
        time_diff = []
        mem_diff = []
        for i in range(5):
            t1 = time.process_time()
            m1 = memory_usage()

            func()

            t2 = time.process_time()
            m2 = memory_usage()
            
            time_diff.append(t2 - t1)
            mem_diff.append(m2[0] - m1[0])

        print(f'''Выполнение заняло {sum(time_diff):.2f} сек и {sum(mem_diff)} 
        (средние значения - {sum(time_diff)/5:.2f} сек и {sum(mem_diff)/5} Мб)\n''')
    return start


@memory_checker
def f1():
    n = [i for i in range(10000000)]
    counter = 0
    for i in n:
        if i % 2 == 0:
            counter += 1
    print(f'Четных чисел: {counter}')

@memory_checker
def f2():
    n = [i for i in range(10000000)]
    counter = 0
    for i in n:
        if i % 2 == 0:
            counter += 1
    del n
    print(f'Четных чисел: {counter}')

@memory_checker
def f3():
    n = [i for i in range(10000000) if i % 2 == 0]
    print(f'Четных чисел: {len(n)}')
    del n

if __name__ == '__main__':
    f1()
    f2()
    f3()

# Я решил использовать свой декоратор.
# Он запускает каждую функцию несколько раз
# И выдает общее и усредненное значения
# 
# 
# 
# Вывод функции f1:
#
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Выполнение заняло 10.42 сек и 0.40234375 
#         (средние значения - 2.08 сек и 0.08046875 Мб)
# 
# Вывод функции f2:
# 
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Выполнение заняло 10.31 сек и 0.0
#         (средние значения - 2.06 сек и 0.0 Мб)
# 
# Вывод функции f3:
#
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Четных чисел: 5000000
# Выполнение заняло 6.14 сек и 0.0390625
#         (средние значения - 1.23 сек и 0.0078125 Мб)
# 
# Функция f1 выполняется и использует больше памяти, чем все остальные функции.
# Это из-за того, что список n не удаляется, а for проходится по каждому элементу списка
# 
# Функция f2 выполняется почти так же, как и f1, но после завершения полностью очищает список n
# 
# Функция f3 выполняется в два раза быстрее, чем f1 и f2, и использует пямяти как f2 